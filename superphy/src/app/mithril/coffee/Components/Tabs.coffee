class Tabs
	mc = mc or {}
	controller: (activeTab) =>
		@activeTab =  mc.utils.coerceToMprop(activeTab, '')
		@openDropdownName = ''

		onchangeTab= ((name, isDropdown)=>
			console.log('onchangeTab', name, isDropdown, @openDropdownName)
			if isDropdown
				@openDropdownName = if name is @openDropdownName then '' else name
			else
				@openDropdownName = ''
				@activeTab(name)
			console.log(name, isDropdown, @openDropdownName)).bind(this)

	view: (ctrl, options) =>
		options = options or {}
		tabs = options.tabs || []
		selectors = mc.utils.combineSelectors


############################

# mc = mc or {}
# mc.Tabs =
#   flavorsSelectors:
#     'bs/':
#       dd: '.dropdown'
#       ddDisabled: '.disabled'
#       ddOpen: '.open'
#       ddLink: '.dropdown-toggle'
#       ddCaret: '.caret'
#       ddMenu: '.dropdown-menu'
#       itemDisabled: '.disabled'
#       itemActive: '.active'
#       item: ''
#       itemDivider: '.divider'
#       itemHeader: '.dropdown-header'
#       parent: '.nav'
#     'bs/nav-tabs': parent: '.nav-tabs'
#     'bs/nav-pills': parent: '.nav-pills'
#     'bs/nav-pills.nav-stacked': parent: '.nav-pills.nav-stacked'
#     'zf/':
#       item: '.tab-title'
#       itemActive: '.tab-title.active'
#       parent: '.tabs'
#     'zf/tabs': {}
#     'zf/tabs.vertical': parent: '.vertical'
#   flavorsAttrs: {}
#   controller: (activeTabName) ->
#     self = this
#     self.activeTabName = mc.utils.coerceToMprop(activeTabName, '')
#     self.openDropdownName = ''
#     self.onchangeTab = ((name, isDropdown) ->
#       console.log 'onchangeTab', name, isDropdown, self.openDropdownName
#       if isDropdown
#         self.openDropdownName = if name == self.openDropdownName then '' else name
#       else
#         self.openDropdownName = ''
#         self.activeTabName name
#       console.log name, isDropdown, self.openDropdownName
#       return
#     ).bind(self)
#     return
#   view: (ctrl, options) ->

#     renderDropdownTab = (tab) ->
#       ddProp = if tab.disabled then 'ddDisabled' else if ctrl.openDropdownName == tab.name then 'ddOpen' else 'dd'
#       label = mc.utils.resolveChild(tab.label or tab.name) + ' '
#       # trailing blank needed for BS look
#       console.log 'renderDropdownTab', ddProp, '...'
#       m 'li' + (selectors[ddProp] or ''), attrs[ddProp] or {}, [
#         m('a' + (selectors.ddLink or ''), mc.utils.extend({}, attrs.ddLink or {}, onclick: ctrl.onchangeTab.bind(self, tab.name, true)), [
#           m('span', label + ' ')
#           m('span' + (selectors.ddCaret or ''), ' ')
#         ])
#         if ctrl.openDropdownName == tab.name and !tab.disabled then renderDropdownItems(tab.dropdown) else []
#       ]

#     renderDropdownItems = (dropdown) ->
#       console.log '---------renderDropdownItems'
#       m 'ul' + (selectors.ddMenu or ''), attrs.ddMenu or {}, dropdown.map((item) ->
#         console.log item.label
#         switch item.type
#           when 'divider'
#             return m('li' + (selectors.itemDivider or ''), { style: margin: '6px 0' }, '')
#           # .divider=9px is not visible
#           when 'header'
#             return m('li' + (selectors.itemHeader or ''), item.label)
#           else
#             return renderStaticTab(item)
#         return
#       )

#     renderStaticTab = (tab) ->
#       isActiveTab = ctrl.activeTabName() == tab.name
#       itemProp = if tab.disabled then 'itemDisabled' else if isActiveTab then 'itemActive' else 'item'
#       linkProp = if tab.disabled then 'linkDisabled' else if isActiveTab then 'linkActive' else 'link'
#       label = mc.utils.resolveChild(tab.label or tab.name)
#       route = mc.utils.resolveChild(tab.redirectTo)
#       href = ''
#       attr = {}
#       console.log 'static tab', tab.name, route, tab.disabled, itemProp, linkProp
#       if !tab.disabled
#         if route
#           href = '[href="' + route + '"]'
#           attr = config: m.route
#         else
#           attr = onclick: ctrl.onchangeTab.bind(self, tab.name, false)
#       m 'li' + (selectors[itemProp] or ''), attrs[itemProp] or {}, m('a' + href + (selectors[linkProp] or ''), mc.utils.extend({}, attrs[linkProp] or {}, attr), label)

#     options = options or {}
#     self = this
#     tabs = options.tabs or []
#     selectors = mc.utils.combineSelectors({}, self.flavorsSelectors[options.flavor.substr(0, 3)] or {}, self.flavorsSelectors[options.flavor] or {}, options.selectors or {})
#     attrs = mc.utils.extend({}, self.flavorsAttrs[options.flavor.substr(0, 3)] or {}, self.flavorsAttrs[options.flavor] or {}, options.attrs or {})
#     if !ctrl.activeTabName()
#       self.onchangeTab tabs[0].name or '', false
#     # render tabs wrapper
#     m 'ul' + (selectors.parent or ''), attrs.parent or {}, tabs.map((tab) ->
#       if tab.dropdown
#         renderDropdownTab tab
#       else
#         renderStaticTab tab
#     )

# ---
# generated by js2coffee 2.1.0

